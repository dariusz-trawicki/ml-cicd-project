name: ci-cd

on:
  push:
    branches: ["develop", "main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  APP_NAME: ml-app
  IMAGE_TAG: latest
  TAG_KEY: app       # ec2.tf: app = var.app_name   # <─ TAG_KEY=app, TAG_VALUE=ml-app
  TAG_VALUE: ml-app

jobs:
  terraform-apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init (S3 backend)
        working-directory: ./terraform/infra
        run: terraform init -reconfigure

      - name: Terraform Plan
        working-directory: ./terraform/infra
        run: |
          terraform plan \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="environment=staging" \
            -var="image_tag=${{ env.IMAGE_TAG }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
        working-directory: ./terraform/infra
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="environment=staging" \
            -var="image_tag=${{ env.IMAGE_TAG }}"

  build-and-push-image:
    name: CI - build & push image to ECR
    needs: terraform-apply
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Debug who we are (first runs)
      - name: Who am I
        run: aws sts get-caller-identity

      # Build & push image (optional but handy)
      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push app image
        run: |
          REPO_URI=${{ steps.ecr.outputs.registry }}/${{ env.APP_NAME }}
          docker build -t $REPO_URI:${{ env.IMAGE_TAG }} ./
          docker push $REPO_URI:${{ env.IMAGE_TAG }}

  cd-deploy-to-ec2:
    needs: build-and-push-image
    name: CD - deploy image to EC2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Find target EC2 instances by tag
        id: ec2
        run: |
          INSTANCES=$(aws ec2 describe-instances \
            --region "$AWS_REGION" \
            --filters "Name=tag:${TAG_KEY},Values=${TAG_VALUE}" "Name=instance-state-name,Values=running" \
            --query 'Reservations[].Instances[].InstanceId' --output text)
          if [ -z "$INSTANCES" ]; then
            echo "No running instances found with tag ${TAG_KEY}=${TAG_VALUE}"; exit 1
          fi
          echo "instances=$INSTANCES" >> $GITHUB_OUTPUT

      - name: Send SSM Run Command (pull & run container)
        env:
          INSTANCES: ${{ steps.ec2.outputs.instances }}
        run: |
          # BUILD A SCRIPT WITH SPECIFIC VALUES (substitution on the GHA side)
          SCRIPT=$(cat <<'EOF'
          set -euxo pipefail

          REGION="__AWS_REGION__"
          APP="__APP_NAME__"
          TAG="__IMAGE_TAG__"

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
          IMAGE_URI="${REGISTRY}/${APP}:${TAG}"

          aws ecr get-login-password --region "${REGION}" \
            | docker login --username AWS --password-stdin "${REGISTRY}"

          docker pull "${IMAGE_URI}" || true
          docker rm -f "${APP}" 2>/dev/null || true
          docker run -d --name "${APP}" -p 80:8080 --restart unless-stopped "${IMAGE_URI}"
          EOF
          )

          # replace placeholders with real values ​​from the runner's ENV
          SCRIPT="${SCRIPT/__AWS_REGION__/${AWS_REGION}}"
          SCRIPT="${SCRIPT/__APP_NAME__/${APP_NAME}}"
          SCRIPT="${SCRIPT/__IMAGE_TAG__/${IMAGE_TAG}}"

          # SSM wymaga, by 'commands' było listą; zbuduj JSON
          JSON_PARAMS=$(jq -n --arg s "$SCRIPT" '{commands: [$s]}')

          # SEND COMMAND - IMPORTANT: --cli-binary-format raw-in-base64-out
          CMD_ID=$(aws ssm send-command \
            --region "$AWS_REGION" \
            --document-name "AWS-RunShellScript" \
            --parameters "$JSON_PARAMS" \
            --instance-ids $INSTANCES \
            --comment "Deploy ${APP_NAME}:${IMAGE_TAG} from ECR" \
            --query 'Command.CommandId' \
            --output text \
            --cli-binary-format raw-in-base64-out)

          echo "command_id=$CMD_ID" >> $GITHUB_OUTPUT
          echo "SSM CommandId: $CMD_ID"
